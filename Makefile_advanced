
# Makefile pour Tests Cryptographiques Avanc√©s
# ============================================
# 
# Syst√®me de compilation pour les innovations cryptographiques
# du syst√®me de m√©moire visuelle autonome.

CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -O2 -g
LDFLAGS = -lm
TARGETS = test_advanced_crypto
OBJECTS = test_advanced_crypto.o

# Configuration pour diff√©rents modes de compilation
DEBUG_FLAGS = -DDEBUG -g -O0
RELEASE_FLAGS = -DRELEASE -O3 -DNDEBUG
CRYPTO_FLAGS = -DCRYPTO_ENABLED -DHASH_VALIDATION

# === TARGETS PRINCIPAUX ===

all: $(TARGETS)
	@echo "=== COMPILATION COMPL√àTE ==="
	@echo "Ex√©cutables g√©n√©r√©s:"
	@for target in $(TARGETS); do \
		echo "  ‚úÖ $$target"; \
	done
	@echo ""
	@echo "Pour ex√©cuter les tests: make test"
	@echo "Pour nettoyer: make clean"

# Compilation du programme principal
test_advanced_crypto: test_advanced_crypto.o
	@echo "Compilation des tests cryptographiques avanc√©s..."
	$(CC) $(CFLAGS) $(CRYPTO_FLAGS) -o $@ $^ $(LDFLAGS)
	@echo "‚úÖ test_advanced_crypto compil√© avec succ√®s"

test_advanced_crypto.o: test_advanced_crypto.c
	@echo "Compilation du module de tests cryptographiques..."
	$(CC) $(CFLAGS) $(CRYPTO_FLAGS) -c $< -o $@

# === TARGETS DE TESTS ===

test: test_advanced_crypto
	@echo "=== EX√âCUTION DES TESTS CRYPTOGRAPHIQUES AVANC√âS ==="
	@echo ""
	@./test_advanced_crypto

test-debug: clean
	@echo "=== COMPILATION ET TESTS EN MODE DEBUG ==="
	$(CC) $(CFLAGS) $(DEBUG_FLAGS) $(CRYPTO_FLAGS) test_advanced_crypto.c -o test_advanced_crypto $(LDFLAGS)
	@./test_advanced_crypto

test-release: clean
	@echo "=== COMPILATION ET TESTS EN MODE RELEASE ==="
	$(CC) $(CFLAGS) $(RELEASE_FLAGS) $(CRYPTO_FLAGS) test_advanced_crypto.c -o test_advanced_crypto $(LDFLAGS)
	@./test_advanced_crypto

# === TARGETS DE VALIDATION ===

validate: test
	@echo ""
	@echo "=== VALIDATION COMPL√àTE DU SYST√àME CRYPTOGRAPHIQUE ==="
	@echo "Tests fonctionnels: EX√âCUT√âS"
	@echo "Benchmarks performance: EX√âCUT√âS"
	@echo "Validation s√©curit√©: COMPL√àTE"
	@echo ""
	@if [ $$? -eq 0 ]; then \
		echo "üéâ VALIDATION R√âUSSIE - SYST√àME PR√äT POUR D√âPLOIEMENT üéâ"; \
	else \
		echo "‚ö†Ô∏è VALIDATION √âCHOU√âE - R√âVISION N√âCESSAIRE ‚ö†Ô∏è"; \
	fi

# Tests de performance uniquement
benchmark: test_advanced_crypto
	@echo "=== BENCHMARK PERFORMANCE CRYPTOGRAPHIQUE ==="
	@./test_advanced_crypto | grep -A 20 "Benchmark Performance"

# Tests de s√©curit√©
security-test: test_advanced_crypto
	@echo "=== TESTS DE S√âCURIT√â CRYPTOGRAPHIQUE ==="
	@./test_advanced_crypto | grep -E "(‚úÖ|‚ùå)" | grep -E "(corruption|falsification|invalide)"

# === TARGETS DE D√âVELOPPEMENT ===

# Compilation avec tous les warnings
warnings: clean
	$(CC) $(CFLAGS) -Wall -Wextra -Wpedantic -Wshadow -Wstrict-prototypes \
		$(CRYPTO_FLAGS) test_advanced_crypto.c -o test_advanced_crypto $(LDFLAGS)

# Analyse statique avec GCC
analyze: clean
	$(CC) $(CFLAGS) -fanalyzer $(CRYPTO_FLAGS) test_advanced_crypto.c -o test_advanced_crypto $(LDFLAGS)
	@echo "‚úÖ Analyse statique termin√©e"

# Compilation pour d√©bogage avec GDB
debug: clean
	$(CC) $(CFLAGS) $(DEBUG_FLAGS) $(CRYPTO_FLAGS) -ggdb3 test_advanced_crypto.c -o test_advanced_crypto $(LDFLAGS)
	@echo "‚úÖ Version debug compil√©e (compatible GDB)"

# === TARGETS DE DOCUMENTATION ===

# G√©n√©ration de documentation automatique
docs:
	@echo "=== G√âN√âRATION DOCUMENTATION ==="
	@echo "Fonctionnalit√©s cryptographiques document√©es:"
	@grep -n "int test_" test_advanced_crypto.c | sed 's/^/  /'
	@echo ""
	@echo "Structures cryptographiques:"
	@grep -n "typedef struct" test_advanced_crypto.c | sed 's/^/  /'
	@echo ""
	@echo "Documentation compl√®te disponible dans VISUAL_MEMORY_ADVANCED.md"

# === TARGETS D'INSTALLATION ===

install: $(TARGETS)
	@echo "=== INSTALLATION DES TESTS CRYPTOGRAPHIQUES ==="
	@mkdir -p ../bin
	@cp $(TARGETS) ../bin/
	@echo "‚úÖ Installation termin√©e dans ../bin/"

# === TARGETS DE NETTOYAGE ===

clean:
	@echo "Nettoyage des fichiers temporaires..."
	@rm -f $(OBJECTS) $(TARGETS)
	@echo "‚úÖ Nettoyage termin√©"

distclean: clean
	@echo "Nettoyage complet..."
	@rm -f *~ *.bak core
	@echo "‚úÖ Nettoyage complet termin√©"

# === TARGETS D'AIDE ===

help:
	@echo "=== AIDE MAKEFILE CRYPTOGRAPHIQUE AVANC√â ==="
	@echo ""
	@echo "TARGETS PRINCIPAUX:"
	@echo "  all          - Compiler tous les ex√©cutables"
	@echo "  test         - Ex√©cuter tous les tests cryptographiques"
	@echo "  validate     - Validation compl√®te du syst√®me"
	@echo "  clean        - Nettoyer les fichiers g√©n√©r√©s"
	@echo ""
	@echo "TARGETS DE TESTS:"
	@echo "  test-debug   - Tests en mode debug d√©taill√©"
	@echo "  test-release - Tests en mode release optimis√©"
	@echo "  benchmark    - Tests de performance uniquement"
	@echo "  security-test- Tests de s√©curit√© uniquement"
	@echo ""
	@echo "TARGETS DE D√âVELOPPEMENT:"
	@echo "  warnings     - Compilation avec warnings √©tendus"
	@echo "  analyze      - Analyse statique du code"
	@echo "  debug        - Compilation pour GDB"
	@echo ""
	@echo "TARGETS UTILITAIRES:"
	@echo "  docs         - Afficher documentation"
	@echo "  install      - Installer dans ../bin/"
	@echo "  help         - Afficher cette aide"

# === CONFIGURATION AUTOMATIQUE ===

# D√©tection automatique des capacit√©s syst√®me
detect-system:
	@echo "=== D√âTECTION CONFIGURATION SYST√àME ==="
	@echo "Compilateur: $(shell $(CC) --version | head -1)"
	@echo "Architecture: $(shell uname -m)"
	@echo "OS: $(shell uname -s)"
	@echo "Processeur: $(shell nproc) cores"
	@echo "M√©moire: $(shell free -h | grep Mem | awk '{print $$2}') RAM"
	@echo ""
	@echo "Optimisations recommand√©es:"
	@if [ $(shell nproc) -gt 4 ]; then \
		echo "  ‚úÖ Multi-threading support√©"; \
	fi
	@if [ $(shell free -m | grep Mem | awk '{print $$2}') -gt 4000 ]; then \
		echo "  ‚úÖ M√©moire suffisante pour tests intensifs"; \
	fi

# === TARGETS AVANC√âS ===

# Tests de r√©gression automatis√©s
regression: clean all
	@echo "=== TESTS DE R√âGRESSION CRYPTOGRAPHIQUE ==="
	@for i in 1 2 3 4 5; do \
		echo "Ex√©cution $$i/5..."; \
		./test_advanced_crypto > /tmp/crypto_test_$$i.log 2>&1; \
		if [ $$? -ne 0 ]; then \
			echo "‚ùå √âchec it√©ration $$i"; \
			exit 1; \
		fi; \
	done
	@echo "‚úÖ 5 ex√©cutions r√©ussies - Syst√®me stable"

# Tests de stress
stress: test_advanced_crypto
	@echo "=== TESTS DE STRESS CRYPTOGRAPHIQUE ==="
	@for i in {1..10}; do \
		echo "Stress test $$i/10..."; \
		timeout 30 ./test_advanced_crypto >/dev/null 2>&1 & \
	done
	@wait
	@echo "‚úÖ Tests de stress termin√©s"

# Profiling de performance
profile: clean
	$(CC) $(CFLAGS) $(CRYPTO_FLAGS) -pg test_advanced_crypto.c -o test_advanced_crypto $(LDFLAGS)
	@./test_advanced_crypto
	@gprof test_advanced_crypto gmon.out > performance_profile.txt
	@echo "‚úÖ Profil de performance g√©n√©r√©: performance_profile.txt"

# === PHONY TARGETS ===

.PHONY: all test test-debug test-release validate benchmark security-test \
        warnings analyze debug docs install clean distclean help \
        detect-system regression stress profile

# === INFORMATIONS MAKEFILE ===

info:
	@echo "=== INFORMATIONS MAKEFILE CRYPTOGRAPHIQUE ==="
	@echo "Version: 2.0.0 Advanced"
	@echo "Auteur: Visual Memory Systems"
	@echo "Date: $(shell date)"
	@echo "Targets disponibles: $(shell make -qp | grep '^[a-zA-Z]' | cut -d: -f1 | sort | uniq | wc -l)"
	@echo ""
	@echo "Fichiers sources:"
	@echo "  test_advanced_crypto.c - Tests cryptographiques principaux"
	@echo ""
	@echo "D√©pendances:"
	@echo "  libm - Fonctions math√©matiques"
	@echo ""
	@echo "Utilisation: make help"
