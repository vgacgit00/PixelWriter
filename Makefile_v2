
# MAKEFILE VISUALMEM V2 - VERSION S√âCURIS√âE
# =========================================
#
# Compilation optimis√©e avec flags de s√©curit√© renforc√©s
# et support complet thread safety + debugging avanc√©

# === CONFIGURATION ===
CC = gcc
CFLAGS = -std=c11 -Wall -Wextra -Werror -O2 -g
SECURITY_FLAGS = -fstack-protector-strong -D_FORTIFY_SOURCE=2 -fPIE -Wformat=2
THREAD_FLAGS = -pthread -D_REENTRANT -D_THREAD_SAFE
DEBUG_FLAGS = -DDEBUG -fsanitize=address -fsanitize=thread -fno-omit-frame-pointer
LIBS = -lpthread -lm

# Directories
SRC_DIR = .
BUILD_DIR = build_v2
TARGET_DIR = bin_v2

# === TARGETS PRINCIPAUX ===
.PHONY: all clean install test benchmark security-test demo help

all: $(TARGET_DIR)/libvisualmem_v2.so $(TARGET_DIR)/libvisualmem_v2.a $(TARGET_DIR)/test_visualmem_v2 $(TARGET_DIR)/demo_v2

# === R√àGLES DE COMPILATION ===

# Biblioth√®que partag√©e V2
$(TARGET_DIR)/libvisualmem_v2.so: $(BUILD_DIR)/libvisualmem_v2.o | $(TARGET_DIR)
	@echo "üîó Cr√©ation biblioth√®que partag√©e V2..."
	$(CC) -shared -fPIC $(SECURITY_FLAGS) $(THREAD_FLAGS) -o $@ $< $(LIBS)

# Biblioth√®que statique V2
$(TARGET_DIR)/libvisualmem_v2.a: $(BUILD_DIR)/libvisualmem_v2.o | $(TARGET_DIR)
	@echo "üìö Cr√©ation biblioth√®que statique V2..."
	ar rcs $@ $<

# Objet principal V2
$(BUILD_DIR)/libvisualmem_v2.o: libvisualmem_v2.c libvisualmem_v2.h | $(BUILD_DIR)
	@echo "üîß Compilation libvisualmem_v2.c..."
	$(CC) $(CFLAGS) $(SECURITY_FLAGS) $(THREAD_FLAGS) -fPIC -c -o $@ $<

# Tests V2
$(TARGET_DIR)/test_visualmem_v2: test_visualmem_v2.c $(TARGET_DIR)/libvisualmem_v2.a | $(TARGET_DIR)
	@echo "üß™ Compilation tests V2..."
	$(CC) $(CFLAGS) $(SECURITY_FLAGS) $(THREAD_FLAGS) -o $@ $< -L$(TARGET_DIR) -lvisualmem_v2 $(LIBS)

# Demo V2
$(TARGET_DIR)/demo_v2: demo_v2.c $(TARGET_DIR)/libvisualmem_v2.a | $(TARGET_DIR)
	@echo "üéÆ Compilation d√©mo V2..."
	$(CC) $(CFLAGS) $(SECURITY_FLAGS) $(THREAD_FLAGS) -o $@ $< -L$(TARGET_DIR) -lvisualmem_v2 $(LIBS)

# === CIBLES UTILITAIRES ===

# Cr√©ation r√©pertoires
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

$(TARGET_DIR):
	@mkdir -p $(TARGET_DIR)

# Installation syst√®me
install: all
	@echo "üì¶ Installation syst√®me V2..."
	sudo cp $(TARGET_DIR)/libvisualmem_v2.so /usr/local/lib/
	sudo cp $(TARGET_DIR)/libvisualmem_v2.a /usr/local/lib/
	sudo cp libvisualmem_v2.h /usr/local/include/
	sudo ldconfig

# Tests s√©curit√©
security-test: $(TARGET_DIR)/test_visualmem_v2
	@echo "üîí Ex√©cution tests s√©curit√© V2..."
	@echo "================================"
	LD_LIBRARY_PATH=$(TARGET_DIR):$$LD_LIBRARY_PATH $(TARGET_DIR)/test_visualmem_v2

# Tests complets
test: security-test
	@echo "‚úÖ Tests V2 termin√©s"

# Benchmark performance
benchmark: $(TARGET_DIR)/test_visualmem_v2
	@echo "‚ö° Benchmark performance V2..."
	@echo "=============================="
	LD_LIBRARY_PATH=$(TARGET_DIR):$$LD_LIBRARY_PATH $(TARGET_DIR)/test_visualmem_v2 --benchmark

# D√©monstration interactive
demo: $(TARGET_DIR)/demo_v2
	@echo "üéÆ D√©monstration V2..."
	@echo "====================="
	LD_LIBRARY_PATH=$(TARGET_DIR):$$LD_LIBRARY_PATH $(TARGET_DIR)/demo_v2

# === CIBLES DEBUG ===

# Version debug avec sanitizers
debug: CFLAGS += $(DEBUG_FLAGS)
debug: all
	@echo "üêõ Version debug V2 compil√©e avec sanitizers"

# Analyse statique
static-analysis:
	@echo "üîç Analyse statique code V2..."
	@which cppcheck >/dev/null 2>&1 || (echo "‚ö†Ô∏è  cppcheck non install√©"; exit 1)
	cppcheck --enable=all --inconclusive --std=c11 \
		--suppress=missingIncludeSystem \
		libvisualmem_v2.c libvisualmem_v2.h test_visualmem_v2.c

# Profiling performance
profile: $(TARGET_DIR)/test_visualmem_v2
	@echo "üìä Profiling performance V2..."
	@which valgrind >/dev/null 2>&1 || (echo "‚ö†Ô∏è  valgrind non install√©"; exit 1)
	LD_LIBRARY_PATH=$(TARGET_DIR):$$LD_LIBRARY_PATH \
		valgrind --tool=callgrind --collect-jumps=yes \
		$(TARGET_DIR)/test_visualmem_v2

# Test fuites m√©moire
memcheck: $(TARGET_DIR)/test_visualmem_v2
	@echo "üß† V√©rification fuites m√©moire V2..."
	@which valgrind >/dev/null 2>&1 || (echo "‚ö†Ô∏è  valgrind non install√©"; exit 1)
	LD_LIBRARY_PATH=$(TARGET_DIR):$$LD_LIBRARY_PATH \
		valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
		--track-origins=yes $(TARGET_DIR)/test_visualmem_v2

# === CIBLES DOCUMENTATION ===

# G√©n√©ration documentation
docs:
	@echo "üìñ G√©n√©ration documentation V2..."
	@which doxygen >/dev/null 2>&1 || (echo "‚ö†Ô∏è  doxygen non install√©"; exit 1)
	doxygen Doxyfile_v2

# Rapport s√©curit√©
security-report: $(TARGET_DIR)/test_visualmem_v2
	@echo "üìã G√©n√©ration rapport s√©curit√© V2..."
	LD_LIBRARY_PATH=$(TARGET_DIR):$$LD_LIBRARY_PATH $(TARGET_DIR)/test_visualmem_v2 --security-report > SECURITY_REPORT_V2.md
	@echo "‚úÖ Rapport g√©n√©r√©: SECURITY_REPORT_V2.md"

# === NETTOYAGE ===

clean:
	@echo "üßπ Nettoyage fichiers temporaires..."
	rm -rf $(BUILD_DIR) $(TARGET_DIR)
	rm -f *.o *.so *.a core gmon.out callgrind.out.*
	rm -f SECURITY_REPORT_V2.md

clean-all: clean
	@echo "üßΩ Nettoyage complet..."
	rm -rf docs/ *.log *.tmp

# === AIDE ===

help:
	@echo "üîí MAKEFILE VISUALMEM V2 - VERSION S√âCURIS√âE"
	@echo "============================================"
	@echo ""
	@echo "Cibles principales:"
	@echo "  all              - Compile tout (biblioth√®ques + tests + demo)"
	@echo "  install          - Installation syst√®me"
	@echo "  test             - Ex√©cute tous les tests"
	@echo "  security-test    - Tests s√©curit√© sp√©cifiques"
	@echo "  benchmark        - Tests performance"
	@echo "  demo             - D√©monstration interactive"
	@echo ""
	@echo "Cibles debug:"
	@echo "  debug            - Compilation avec debug + sanitizers"
	@echo "  static-analysis  - Analyse statique avec cppcheck"
	@echo "  profile          - Profiling avec valgrind"
	@echo "  memcheck         - V√©rification fuites m√©moire"
	@echo ""
	@echo "Cibles documentation:"
	@echo "  docs             - G√©n√©ration documentation Doxygen"
	@echo "  security-report  - Rapport s√©curit√© d√©taill√©"
	@echo ""
	@echo "Cibles nettoyage:"
	@echo "  clean            - Supprime fichiers temporaires"
	@echo "  clean-all        - Nettoyage complet"
	@echo ""
	@echo "Exemples d'usage:"
	@echo "  make all && make test     # Compilation et tests"
	@echo "  make debug memcheck       # Version debug + analyse m√©moire"
	@echo "  make install              # Installation syst√®me"

# === INFORMATIONS BUILD ===

info:
	@echo "üìä INFORMATIONS BUILD V2"
	@echo "========================"
	@echo "Compilateur:     $(CC)"
	@echo "Flags standard:  $(CFLAGS)"
	@echo "Flags s√©curit√©:  $(SECURITY_FLAGS)"
	@echo "Flags thread:    $(THREAD_FLAGS)"
	@echo "Biblioth√®ques:   $(LIBS)"
	@echo "R√©pertoire src:  $(SRC_DIR)"
	@echo "R√©pertoire build: $(BUILD_DIR)"
	@echo "R√©pertoire cible: $(TARGET_DIR)"

# === R√àGLES D√âPENDANCES ===

# D√©pendances automatiques
-include $(BUILD_DIR)/*.d

%.d: %.c
	@$(CC) $(CFLAGS) -MM -MT $(@:.d=.o) $< > $@

.SUFFIXES:
