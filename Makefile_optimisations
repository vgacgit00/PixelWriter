# Makefile pour les optimisations LibVisualMem v3.0 Enhanced
# Bas√© sur l'analyse critique compl√®te

CC = gcc
CFLAGS = -Wall -Wextra -O2 -std=c99 -pthread
LDFLAGS = -lm -lpthread

# Cibles principales
TARGETS = optimisations_implementation test_optimisations benchmark_optimisations

# R√©pertoires
BIN_DIR = bin_optimisations
OBJ_DIR = obj_optimisations
LOG_DIR = logs_optimisations
REPORT_DIR = reports_optimisations

# Cr√©ation des r√©pertoires
$(shell mkdir -p $(BIN_DIR) $(OBJ_DIR) $(LOG_DIR) $(REPORT_DIR))

# R√®gles principales
all: $(TARGETS)

# Compilation des optimisations
optimisations_implementation: $(OBJ_DIR)/optimisations_impl√©mentation.o
	$(CC) $(CFLAGS) -o $(BIN_DIR)/$@ $< $(LDFLAGS)
	@echo "‚úÖ Optimisations compil√©es avec succ√®s"

# Tests des optimisations
test_optimisations: $(OBJ_DIR)/test_optimisations.o
	$(CC) $(CFLAGS) -o $(BIN_DIR)/$@ $< $(LDFLAGS)
	@echo "‚úÖ Tests d'optimisations compil√©s"

# Benchmark des optimisations
benchmark_optimisations: $(OBJ_DIR)/benchmark_optimisations.o
	$(CC) $(CFLAGS) -o $(BIN_DIR)/$@ $< $(LDFLAGS)
	@echo "‚úÖ Benchmarks d'optimisations compil√©s"

# Compilation des objets
$(OBJ_DIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# Tests automatiques
test: all
	@echo "üß™ Lancement des tests d'optimisations..."
	@$(BIN_DIR)/test_optimisations > $(LOG_DIR)/test_results.log 2>&1
	@echo "üìä R√©sultats des tests sauvegard√©s dans $(LOG_DIR)/test_results.log"

# Benchmarks automatiques
benchmark: all
	@echo "üìà Lancement des benchmarks d'optimisations..."
	@$(BIN_DIR)/benchmark_optimisations > $(LOG_DIR)/benchmark_results.log 2>&1
	@echo "üìä R√©sultats des benchmarks sauvegard√©s dans $(LOG_DIR)/benchmark_results.log"

# Tests de stress
stress: all
	@echo "üí™ Lancement des tests de stress..."
	@$(BIN_DIR)/optimisations_implementation --stress > $(LOG_DIR)/stress_results.log 2>&1
	@echo "üìä R√©sultats des tests de stress sauvegard√©s dans $(LOG_DIR)/stress_results.log"

# Validation compl√®te
validate: test benchmark stress
	@echo "üîç Validation compl√®te des optimisations..."
	@echo "üìã G√©n√©ration du rapport de validation..."
	@./generate_validation_report.sh > $(REPORT_DIR)/validation_report.md
	@echo "‚úÖ Rapport de validation g√©n√©r√©: $(REPORT_DIR)/validation_report.md"

# Nettoyage
clean:
	rm -rf $(BIN_DIR) $(OBJ_DIR) $(LOG_DIR)
	@echo "üßπ Nettoyage effectu√©"

# Installation des d√©pendances
install-deps:
	@echo "üì¶ Installation des d√©pendances..."
	@sudo apt-get update
	@sudo apt-get install -y build-essential libpthread-stubs0-dev
	@echo "‚úÖ D√©pendances install√©es"

# Aide
help:
	@echo "LibVisualMem v3.0 Enhanced - Makefile des Optimisations"
	@echo "====================================================="
	@echo ""
	@echo "Cibles disponibles:"
	@echo "  all          - Compile toutes les optimisations"
	@echo "  test         - Lance les tests d'optimisations"
	@echo "  benchmark    - Lance les benchmarks d'optimisations"
	@echo "  stress       - Lance les tests de stress"
	@echo "  validate     - Validation compl√®te avec rapport"
	@echo "  clean        - Nettoie les fichiers g√©n√©r√©s"
	@echo "  install-deps - Installe les d√©pendances"
	@echo "  help         - Affiche cette aide"
	@echo ""
	@echo "Exemples d'utilisation:"
	@echo "  make all                    # Compilation compl√®te"
	@echo "  make test                   # Tests uniquement"
	@echo "  make validate               # Validation compl√®te"
	@echo "  make clean && make all      # Recompilation propre"

# R√®gles sp√©ciales
.PHONY: all test benchmark stress validate clean install-deps help

# Affichage des informations de compilation
info:
	@echo "üîß Informations de compilation:"
	@echo "  Compilateur: $(CC)"
	@echo "  Flags: $(CFLAGS)"
	@echo "  R√©pertoire binaire: $(BIN_DIR)"
	@echo "  R√©pertoire objets: $(OBJ_DIR)"
	@echo "  R√©pertoire logs: $(LOG_DIR)"
	@echo "  R√©pertoire rapports: $(REPORT_DIR)"